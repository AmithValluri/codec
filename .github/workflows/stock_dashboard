# stock_dashboard.py
import streamlit as st
import pandas as pd
import plotly.graph_objects as go
import time
from datetime import datetime
import requests
import yfinance as yf
from ta.volatility import BollingerBands
from ta.momentum import RSIIndicator
from ta.trend import MACD
import pytz

st.set_page_config(
    page_title="Real-Time Stock Dashboard",
    page_icon="ðŸ“ˆ",
    layout="wide"
)

ALPHA_VANTAGE_API_KEY = 'YOUR_API_KEY'  # Get free key from Alpha Vantage

@st.cache_data(ttl=60)  # Cache for 60 seconds
def get_stock_data(symbol, period='1d'):
    try:
        stock = yf.Ticker(symbol)
        hist = stock.history(period=period)
        if hist.empty:
            st.warning(f"No data found for {symbol}")
            return None
        
       
        bb_indicator = BollingerBands(hist['Close'])
        hist['bb_upper'] = bb_indicator.bollinger_hband()
        hist['bb_lower'] = bb_indicator.bollinger_lband()
        
        rsi_indicator = RSIIndicator(hist['Close'])
        hist['RSI'] = rsi_indicator.rsi()
        
        macd = MACD(hist['Close'])
        hist['MACD'] = macd.macd()
        hist['MACD_signal'] = macd.macd_signal()
        
        return hist
    except Exception as e:
        st.error(f"Error fetching data: {e}")
        return None


st.sidebar.title("Dashboard Controls")

symbols = st.sidebar.text_input(
    "Enter stock symbols (comma separated)", 
    "AAPL,MSFT,GOOG,TSLA"
).upper().split(',')

time_frame = st.sidebar.selectbox(
    "Select time frame",
    ("1d", "5d", "1mo", "3mo", "6mo", "1y", "2y")
)

show_indicators = st.sidebar.checkbox("Show Technical Indicators", True)
auto_refresh = st.sidebar.checkbox("Auto Refresh (every 60s)", True)

# Main dashboard
st.title("ðŸ“Š Real-Time Stock Market Dashboard")
st.markdown("""
    <style>
    .stProgress > div > div > div > div {
        background-color: #4e79a7;
    }
    </style>
""", unsafe_allow_html=True)


placeholder = st.empty()


colors = ['#4e79a7', '#f28e2b', '#e15759', '#76b7b2', '#59a14f']

def create_dashboard():
    data_frames = {}
    
    with placeholder.container():
        if auto_refresh:
            st.write(f"Last update: {datetime.now(pytz.timezone('America/New_York')).strftime('%Y-%m-%d %H:%M:%S')}")
      
        progress_bar = st.progress(0)
        
        for i, symbol in enumerate(symbols):
            symbol = symbol.strip()
            if not symbol:
                continue
                
            df = get_stock_data(symbol, time_frame)
            if df is not None:
                data_frames[symbol] = df
            progress_bar.progress((i + 1) / len(symbols))
            
        progress_bar.empty()
        
        
        tabs = st.tabs([f"{symbol}" for symbol in data_frames.keys()])
        
        
        for idx, (symbol, df) in enumerate(data_frames.items()):
            with tabs[idx]:
                col1, col2 = st.columns(2)
                
                with col1:
                    # Main price chart
                    fig = go.Figure()
                    
                   
                    fig.add_trace(go.Scatter(
                        x=df.index,
                        y=df['Close'],
                        name='Price',
                        line=dict(color=colors[idx % len(colors)], width=2)
                    ))
                    
                 
                    if show_indicators:
                        fig.add_trace(go.Scatter(
                            x=df.index,
                            y=df['bb_upper'],
                            name='Upper BB',
                            line=dict(color='rgba(0,0,0,0.2)', width=1),
                            opacity=0.8
                        ))
                        fig.add_trace(go.Scatter(
                            x=df.index,
                            y=df['bb_lower'],
                            name='Lower BB',
                            fill='tonexty',
                            line=dict(color='rgba(0,0,0,0.2)', width=1),
                            opacity=0.8
                        ))
                    
                    fig.update_layout(
                        title=f"{symbol} Price Chart",
                        xaxis_title="Date",
                        yaxis_title="Price (USD)",
                        hovermode="x unified"
                    )
                    st.plotly_chart(fig, use_container_width=True)
                
                with col2:
                    # Key metrics
                    latest = df.iloc[-1]
                    prev_close = df.iloc[-2]['Close'] if len(df) > 1 else latest['Close']
                    
                    delta = latest['Close'] - prev_close
                    delta_pct = (delta / prev_close) * 100
                    
                    st.metric(label="Current Price", 
                             value=f"${latest['Close']:.2f}",
                             delta=f"{delta:.2f} ({delta_pct:.2f}%)")
                    
                    st.write(f"**Open:** ${latest['Open']:.2f} | **High:** ${latest['High']:.2f} | **Low:** ${latest['Low']:.2f}")
                    st.write(f"**Volume:** {latest['Volume']:,}")
                    
               
                    if show_indicators:
                        # RSI
                        rsi_fig = go.Figure()
                        rsi_fig.add_trace(go.Scatter(
                            x=df.index,
                            y=df['RSI'],
                            name='RSI',
                            line=dict(color='#17becf', width=2)
                        ))
                        rsi_fig.add_hline(y=30, line_dash="dot", 
                                         annotation_text="Oversold",
                                         line_color="red")
                        rsi_fig.add_hline(y=70, line_dash="dot",
                                         annotation_text="Overbought", 
                                         line_color="red")
                        rsi_fig.update_layout(
                            title="RSI (14)",
                            height=200,
                            margin=dict(l=20, r=20, t=40, b=20)
                        )
                        st.plotly_chart(rsi_fig, use_container_width=True)
                        
                        # MACD
                        macd_fig = go.Figure()
                        macd_fig.add_trace(go.Scatter(
                            x=df.index,
                            y=df['MACD'],
                            name='MACD',
                            line=dict(color='#17becf', width=2)
                        ))
                        macd_fig.add_trace(go.Scatter(
                            x=df.index,
                            y=df['MACD_signal'],
                            name='Signal',
                            line=dict(color='#ff7f0e', width=2)
                        ))
                        macd_fig.add_bar(
                            x=df.index,
                            y=df['MACD'] - df['MACD_signal'],
                            name='Histogram',
                            marker_color='#7f7f7f'
                        )
                        macd_fig.update_layout(
                            title="MACD",
                            height=200,
                            margin=dict(l=20, r=20, t=40, b=20)
                        )
                        st.plotly_chart(macd_fig, use_container_width=True)
        
        
        st.subheader("Market Overview")
        refresh_button = st.button("Refresh Data")
        
        if refresh_button or auto_refresh:
            try:
                market_data = []
                for symbol in symbols:
                    symbol = symbol.strip()
                    if not symbol:
                        continue
                    
                    stock = yf.Ticker(symbol)
                    info = stock.fast_info
                    market_data.append({
                        'Symbol': symbol,
                        'Current Price': info['lastPrice'],
                        'Change (%)': (info['lastPrice'] - info['previousClose']) / info['previousClose'] * 100,
                        '52W High': info['yearHigh'],
                        '52W Low': info['yearLow'],
                        'Volume': info['lastVolume']
                    })
                
                market_df = pd.DataFrame(market_data)
                st.dataframe(
                    market_df.style.format({
                        'Current Price': '${:.2f}',
                        'Change (%)': '{:.2f}%',
                        '52W High': '${:.2f}',
                        '52W Low': '${:.2f}',
                        'Volume': '{:,.0f}'
                    }).applymap(
                        lambda x: 'color: green' if isinstance(x, (int, float)) and x > 0 else 'color: red',
                        subset=['Change (%)']
                    ),
                    use_container_width=True
                )
            except Exception as e:
                st.error(f"Error fetching market data: {e}")


create_dashboard()


if auto_refresh:
    while not st.session_state.get('stop', False):
        time.sleep(60)
        try:
            create_dashboard()
        except:
            st.session_state['stop'] = True
            raise



